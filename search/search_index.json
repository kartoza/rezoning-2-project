{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about-rezoning","title":"About REZoning:","text":"<p>The Renewable Energy Zoning (REZoning) tool is an interactive, web-based platform designed to identify, visualize, and rank zones that are most suitable for the development of solar, wind, or offshore wind projects. The tool brings together spatial analysis and economic calculations into an online, user-friendly environment that allows users and decision makers to obtain insights into the technical and economic potential of renewable energy resources for all countries. </p>"},{"location":"#rezoning-technical-documentation","title":"REZoning Technical Documentation:","text":"<p>This documentation is intended for developers and site maintainers using, maintaining or interested in the REZoning platform. This documentation site comprises the organizational and technical documentation. Developers can use the documentation to set up a developer's environment on their local machine. </p> <p>The documentation is split into two sections, Workflow and Development. In the Workflow section developers will be guided through using the correct GitHub processes for creating the environment. In the development section developers will be guided through setting up the environment for the REZoning platform on their local machine. </p>"},{"location":"development/","title":"Development","text":"<p>Everything about the development and infastructure of the REZoning software is documented in a reputable manner to ensure future developers can re-produce and excecute the neccesary work required. </p> <p>By selecting the links from the left users can navigate to spesific section required to reprlicate the development environment.</p> <p></p>"},{"location":"development/building_the_backend/","title":"Backend Building","text":""},{"location":"development/building_the_backend/#how-to-run-the-backend-locally","title":"How to run the backend locally:","text":"<p>The API for rezoning contains two parts: the Rezoning API and the Export Function. Each needs to be run individually. But before running any of the two, localstack needs to be running.</p>"},{"location":"development/building_the_backend/#clone-repo--checkout-to-the-development-branch","title":"Clone repo &amp; checkout to the development branch:","text":"<p>First, you need to fetch the source code for the backend using the following command:  </p> <pre><code>git clone https://github.com/worldbank/WB-rezoning-explorer-api.git\n</code></pre> <p>Move into the directory using:  </p> <pre><code>cd WB-rezoning-explorer-api\n</code></pre> <p>Using the current development branch (the main branch contains the production code)  </p> <pre><code>git checkout develop_belgacem\n</code></pre>"},{"location":"development/building_the_backend/#running-localstack","title":"Running localstack:","text":"<ul> <li>Make sure you have localstack setup by following instructions from LocalStack CLI offical install instruction</li> </ul>"},{"location":"development/building_the_backend/#start-localstack-in-the-background","title":"Start LocalStack in the background:","text":"<p>Start local stack using:  </p> <pre><code>localstack start -d\n</code></pre> <p>Note: One common problem might happen with permissions, here is an article on how to fix it: Solving docker permissions</p> <ul> <li> <p>Set up AWS configuration: <pre><code>  aws configure\n</code></pre>   It will ask for AWS Access Key, AWS Secret Key and Region, for example us-east-2.</p> </li> <li> <p>Create the SQS queue in localstack:  </p> </li> </ul> <pre><code>aws sqs create-queue --queue-name export-queue --endpoint-url=http://localhost:4566/\n</code></pre> <ul> <li>Create the export bucket used to communicate the exporting requests between the API and the export function:  </li> </ul> <pre><code>aws s3 mb s3://rezoning-exports --endpoint-url=http://localhost:4566/\n</code></pre>"},{"location":"development/building_the_backend/#install-aws-cli-tool","title":"Install aws cli tool:","text":"<ul> <li>Install AWS CLI tools by following instructions from Installing or updating the latest version of the AWS CLI</li> <li>Check if aws cli was installed correctly using <code>aws --version</code>: this will display the version of the installed aws-cli toolchain.</li> </ul>"},{"location":"development/building_the_backend/#running-rezoning-api","title":"Running Rezoning API:","text":"<p>In order to work with Rezoning locally, you need AWS access to the processed data (Currently around 330Gb of data) and a certain Airtable. </p> <ul> <li>You can do this by setting the following environment variables:  Replace &lt;%&gt; with the keys but omit &lt;%&gt;</li> </ul> <pre><code>export AIRTABLE_KEY=&lt;%AIRTABLE_KEY&gt; AWS_ACCESS_KEY_ID=&lt;%AWS_ACCESS_KEY_ID&gt; AWS_SECRET_ACCESS_KEY=&lt;%AWS_SECRET_ACCESS_KEY&gt;\n</code></pre> <ul> <li>Optional:  If your network is slow, you need to download data using the following command that will make sure every file in the AWS data bucket will be copied over locally to the rezoning-data directory in your home directory:</li> </ul> <pre><code>aws s3 cp s3://gre-processed-data/ ~/rezoning-data/\n</code></pre> <ul> <li>Optional: To work with the local data, the following environment variables need to be set:  </li> </ul> <pre><code>export REZONING_IS_LOCAL_DEV=True\nexport REZONING_LOCAL_DATA_PATH=&lt;%YOUR_DATA_PATH&gt;\n</code></pre> <ul> <li>Install the dependencies using:</li> </ul> <pre><code>pip install -e '.[dev]'\n</code></pre> <ul> <li>Install Uvicorn using:  </li> </ul> <pre><code>pip install uvicorn\n</code></pre> <ul> <li>Start the server using:</li> </ul> <pre><code>python3 -m uvicorn rezoning_api.main:app --reload\n</code></pre>"},{"location":"development/building_the_backend/#run-export-function-locally","title":"Run export function locally:","text":"<p>Note:: Make sure to replace &lt;% %&gt; placeholders with your AWS information before running the code below.</p> <pre><code>export AIRTABLE_KEY=&lt;%AIRTABLE_KEY&gt; AWS_ACCESS_KEY_ID=&lt;%AWS_ACCESS_KEY_ID&gt; AWS_SECRET_ACCESS_KEY=&lt;%AWS_SECRET_ACCESS_KEY&gt;\nREGION=us-east-2 REZONING_IS_LOCAL_DEV=True QUEUE_NAME=export-queue \n</code></pre>"},{"location":"development/building_the_frontend/","title":"Frontend Building","text":""},{"location":"development/building_the_frontend/#clone-the-frontend","title":"Clone the frontend:","text":"<p>First, you need to fetch the source code for the frontend using the following command:  </p> <pre><code>git clone https://github.com/worldbank/WB-rezoning-explorer.git\n</code></pre> <p>Move into the directory using:  </p> <pre><code>cd WB-rezoning-explorer\n</code></pre>"},{"location":"development/building_the_frontend/#building-the-frontend","title":"Building the frontend:","text":"<p>To build the frontend properly a specific version of Node needs to be used.</p> <ul> <li>Setup node version manager (nvm) following instructions from NVM github</li> <li> <p>install nodejs 12 using the commands: <pre><code>nvm install v12\nnvm use v12\n</code></pre></p> </li> <li> <p>Install Yarn on ubuntu using:  </p> </li> </ul> <pre><code>npm install -g yarn\n</code></pre> <ul> <li>Install npm dependencies using:</li> </ul> <pre><code>yarn install\n</code></pre> <ul> <li>Start the server with live code reload at http://localhost:9000:  </li> </ul> <pre><code>yarn serve\n</code></pre> <ul> <li>Run tests with:  </li> </ul> <pre><code>yarn test\n</code></pre>"},{"location":"development/building_the_frontend/#using-the-front-end-with-different-rezoning-api-deployment-settings","title":"Using the front end with different rezoning API deployment settings:","text":"<ul> <li>In <code>app/scripts/config/</code> there are setting files for each environment type (local, production or staging).</li> <li>You can set which environment to use by setting NODE_ENV environment variable to \"testing\", \"staging\" or \"development\". </li> <li>You can use a different MapBox key by writing a different mbToken in the config file.</li> <li>apiEndpoint in the settings file indicates the URL to the rezoning-explorer-api in use.</li> </ul>"},{"location":"development/infrastructure_docs/","title":"Infrastructure documentation","text":""},{"location":"development/infrastructure_docs/#infrastructure-documentation","title":"Infrastructure Documentation","text":"<p>The software has 2 main parts: </p>"},{"location":"development/infrastructure_docs/#the-frontend","title":"The Frontend:","text":"<ul> <li> <p>The front facing interface of the software built with ReactJS.  </p> </li> <li> <p>The code's repository is at WB-rezoning-explorer.  </p> </li> <li> <p>The frontend uses MapBox to display the map. </p> </li> </ul>"},{"location":"development/infrastructure_docs/#the-backend","title":"The Backend:","text":"<ul> <li> <p>The backend of the application providing access to a list of API calls that can be explored at API-docs </p> </li> <li> <p>The backbend's code is at WB-rezoning-explorer-api </p> </li> </ul>"},{"location":"development/infrastructure_docs/#backend-architecture","title":"Backend architecture:","text":"<p>Depending on the API calls made, some different parts of the infrastructure will be triggered </p> <p> </p> <p>Export endpoint: The backend will put a request into the SQS export queue. A separate queue processing code will process the export request and in the meantime an export id will be returned to the caller. The caller waits asynchronously for the export to finish and investigates the export progress using the API end point '/v1/export/status/{id}' </p> <p>Filter endpoint:  Will take a tile from a dataset stored in the data S3 bucket and apply filters to it and return a Tile. </p> <p>Zone, LCOE, score endpoint:  Will do same calculations on an area using data stored in the data S3 bucket. For a detailed description of calculations please refer to the REZone User Guide </p> <p>Layers endpoint:  Will return the list of layers or a tile from that layer.  </p>"},{"location":"development/infrastructure_docs/#additional-dependencies","title":"Additional dependencies:","text":"<ul> <li> <p>Airtable: A table that stores IRENA dataset needed by the application. </p> </li> <li> <p>Vector Tile Server: Some vector tile layers are hosted in this address.  </p> </li> </ul>"},{"location":"development/infrastructure_docs/#software-components","title":"Software components:","text":"<ul> <li>Frontend app server. </li> <li>Backend API server. </li> <li>AWS SQS queue. </li> <li>AWS S3 Export bucket. </li> <li>AWS S3 Data bucket. </li> <li>AWS SQS queue processor (rezoning-explorer-api/export/export.py). </li> <li>Airtable: IRENA dataset. </li> <li>Vector Tile Server: Vector tiles server. </li> </ul>"},{"location":"development/overview/","title":"Overview","text":""},{"location":"development/overview/#infrastructure-documentation","title":"Infrastructure Documentation","text":"<p>The software has 2 main parts: </p>"},{"location":"development/overview/#the-frontend","title":"The Frontend:","text":"<ul> <li> <p>The front-facing interface of the software is built with ReactJS](https://reactjs.org/).  </p> </li> <li> <p>The code's repository is at WB-rezoning-explorer.  </p> </li> <li> <p>The front end uses MapBox to display the map. </p> </li> </ul>"},{"location":"development/overview/#the-backend","title":"The Backend:","text":"<ul> <li> <p>The backend of the application provides access to a list of API calls that can be explored at API-docs </p> </li> <li> <p>The backbend's code is at Rezoning Explorer Api </p> </li> </ul>"},{"location":"development/overview/#backend-architecture","title":"Backend architecture:","text":"<p>Depending on the API calls made, some different parts of the infrastructure will be triggered </p> <p> </p> <p>Export endpoint: The backend will put a request into the SQS export queue. A separate queue processing code will process the export request and in the meantime, an export id will be returned to the caller. The caller waits asynchronously for the export to finish and investigates the export progress using the API endpoint '/v1/export/status/{id}' </p> <p>Filter endpoint:  Will take a tile from a dataset stored in the data S3 bucket and apply filters to it and return a Tile. </p> <p>Zone, LCOE, score endpoint:  Will do the same calculations on an area using data stored in the data S3 bucket. For a detailed description of calculations please refer to the REZone User Guide </p> <p>Layers endpoint:  will return the list of layers or a tile from that layer.  </p>"},{"location":"development/overview/#additional-dependencies","title":"Additional dependencies:","text":"<ul> <li> <p>Airtable: A table that stores the IRENA dataset needed by the application. </p> </li> <li> <p>Vector Tile Server: Some vector tile layers are hosted in this address.  </p> </li> </ul>"},{"location":"development/overview/#software-components","title":"Software components:","text":"<ul> <li>Frontend app server. </li> <li>Backend API server. </li> <li>AWS SQS queue. </li> <li>AWS S3 Export bucket. </li> <li>AWS S3 Data bucket. </li> <li>AWS SQS queue processor (rezoning-explorer-api/export/export.py). </li> <li>Airtable: IRENA dataset. </li> <li>Vector Tile Server: Vector tiles server. </li> </ul>"},{"location":"workflow/","title":"Workflow","text":"<p>The development workflow of the REZoning 2 project is tracked on the REZoning 2 GitHub board. All additions to and development of the platform should be recorded on the GitHub project board, most notably the conventions of adding features and the feature validation process.  </p>"},{"location":"workflow/#overview","title":"Overview","text":"<p>The development workflow is run in work sprints (a set timeframe to complete a set number of tasks) on the GitHub board. Tickets that have been created and allocated are added to the board and sprints are planned to resolve the tickets. This workflow ensures that the major parts of the development are achieved when required and the development of the product remains on track. </p>"},{"location":"workflow/#the-github-project-board-features-5-columns-to-monitor-the-workflow","title":"The GitHub project board features 5 columns to monitor the workflow:","text":""},{"location":"workflow/#backlog","title":"Backlog:","text":"<p>This column features all the created tickets and is used to keep track of tasks that are yet to be completed. </p>"},{"location":"workflow/#to-do","title":"To-Do:","text":"<p>From the Backlog column tickets are moved to the To-Do column by the developer to create a planned set of tasks for each sprint. </p>"},{"location":"workflow/#in-progress","title":"In-Progress:","text":"<p>The in-progress column contains all the tickets currently being worked on. When a developer starts working on a ticket it gets moved to the In-Progress column. Thus, all team members can see what work is in progress.</p>"},{"location":"workflow/#done","title":"Done:","text":"<p>Once a ticket is complete and has been tested by the developer, it shoul be moved to the done column. Tickets in the done column should be internally tested by relevant testers. If a ticket fails internal testing, the tester must comment on the ticket preferably with a screenshot. The developer is notified and should move the ticket back to in-progress for continued development. When a ticket passes internal testing, it can be closed with a comment and moved to the Passed Internal Testing column for client to review.   </p>"},{"location":"workflow/#passed-internal-testing","title":"Passed Internal Testing:","text":"<p>From this column the client can select and test tickets. If the client is satisfied with the result, they can move the ticket to the next column. If the client is not satisfied with the result of the ticket, they should re-open the ticket with a comment. This will notify the developer and they will move the ticket to the relevant column. </p>"},{"location":"workflow/#accepted-by-esmap","title":"Accepted By ESMAP:","text":"<p>Tickets deemed finished by the client and require no further development are moved to the Accepted by ESMAP column and the functionality can be outlined in the documentation.    </p>"},{"location":"workflow/Github_issues/","title":"GitHub issues:","text":""},{"location":"workflow/Github_issues/#tickets","title":"Tickets:","text":"<p>Tickets on the REZ Zoning 2 GitHub board are created first as issues and converted into tickets to work on during the sprint at the REZoning catchup meeting. This workflow ensures work required by the client gets done as well as allows the opportunity to clear up any doubts as to work that needs to be done. When issues are created a clear description of what needs to happen is required as well as any accompanying screenshots or videos. If a developer has any doubt, he can simply comment on the ticket and the creator of the ticket as well as any assigned developers will be notified via e-mail. </p>"},{"location":"workflow/Github_issues/#labels","title":"Labels:","text":"<p>Each issue will have its priority assigned as a label. </p> <p></p> <p>Each issue is sized according to its expected time to accomplish. Labels are rated by size with the following labels: </p> <p> </p> <ul> <li>size [N/A] - Applied to issues where size is not applicable</li> <li>Size [1] - It's quick I will have this done in about 1 hour. </li> <li>Size [2] - Give me 2 hours and I will have it for you. </li> <li>Size [5] - It will take between half a day and a full day. </li> <li>Size [8] - This is a full-day job. </li> <li>Size [13] - I'm going to need about a day and a half to two days. </li> <li>Size [20] - It will take at least two to three days. </li> <li>Size [40] - This will take a full week. </li> </ul>"},{"location":"workflow/Github_issues/#scrum-board","title":"SCRUM Board:","text":"<p>The order of issues on the SCRUM board will dictate the order of working on the tickets, meaning if the developer is blocked on a ticket he will default to working on the next ticket. </p> <p></p>"},{"location":"workflow/development/","title":"Development","text":""},{"location":"workflow/development/#the-development-shall-take-place-at-3-different-stages","title":"The development shall take place at 3 different stages:","text":""},{"location":"workflow/development/#development-stage","title":"Development Stage:","text":"<p>Local development environment local to the developer with replication of resources needed to run the software. Notably a private AWS envirnment should be deployed for experimentation in order to not break production or staging envirnments.</p>"},{"location":"workflow/development/#staging-stage","title":"Staging stage:","text":"<p>Features or fixes made and tested locally by the developer should be deployed here in a shareable environment (website and backend available publicly) in order to be tested by users of the app.</p>"},{"location":"workflow/development/#production-stage","title":"Production stage:","text":"<p>Is the public facing deployment of the software and shouldn't be changed (deployed to) unless the features/fixes were accepted to be running with no issues by the users.</p>"}]}